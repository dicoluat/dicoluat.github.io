{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","IndexPage","_ref","data","a","createElement","title","description","keywords","allNodeProductDetail","edges","map","_ref2","node","to","fields","slug","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SEO","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","Header","siteTitle","react_default","style","background","marginBottom","margin","maxWidth","padding","gatsby_browser_entry","color","textDecoration","Layout","Fragment","header","paddingTop","_755544856"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KA6BeW,UArBG,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OAChBP,EAAAQ,EAAAC,cAACN,EAAA,EAAD,KACEH,EAAAQ,EAAAC,cAACL,EAAA,EAAD,CACEM,MAAM,YACNC,YAAY,+OACZC,SAAU,CAAC,sBAAuB,OAAQ,eAAgB,iBAAkB,UAE9EZ,EAAAQ,EAAAC,cAAA,sBACAT,EAAAQ,EAAAC,cAAA,yPAGAT,EAAAQ,EAAAC,cAAA,UACGF,EAAKM,qBAAqBC,MAAMC,IAAI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAF,OACnCjB,EAAAQ,EAAAC,cAAA,UACET,EAAAQ,EAAAC,cAACP,EAAA,KAAD,CAAMgB,GAAID,EAAKE,OAAOC,MAAOH,EAAKP,aASrC,IAAMZ,EAAK,+CC/BlBJ,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAyB,IAAA3B,EAAAG,EAAAD,EAAA,uCAAA0B,IAAA5B,EAAAG,EAAAD,EAAA,gCAAA2B,IAAA,IAAAxB,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAyB,EAAA9B,EAAA,GAAA+B,EAAA/B,EAAAO,EAAAuB,GAAAE,EAAAhC,EAAA,KAAAiC,EAAAjC,EAAAO,EAAAyB,GAAAhC,EAAAG,EAAAD,EAAA,yBAAA+B,EAAAnB,IAAAd,EAAAG,EAAAD,EAAA,+BAAA8B,EAAA,aAAAhC,EAAAG,EAAAD,EAAA,6BAAA8B,EAAA,WAAAhC,EAAAG,EAAAD,EAAA,yBAAA8B,EAAA,OAAAhC,EAAAG,EAAAD,EAAA,4BAAA8B,EAAA,UAAAhC,EAAAG,EAAAD,EAAA,+BAAA8B,EAAA,iBAAAE,EAAAlC,EAAA,KAAAmC,EAAAnC,EAAAO,EAAA2B,GAAAlC,EAAAG,EAAAD,EAAA,iCAAAiC,EAAArB,IAAA,IAAAsB,EAAApC,EAAA,IAAAA,EAAAG,EAAAD,EAAA,8BAAAkC,EAAA,IAYA,IAAMR,EAAqBS,IAAMC,cAAc,IAEzCT,EAAc,SAAAU,GAAK,OACvBjC,EAAAQ,EAAAC,cAACa,EAAmBY,SAApB,KACG,SAAAC,GACC,OACEF,EAAM1B,MACL4B,EAAgBF,EAAMnC,QAAUqC,EAAgBF,EAAMnC,OAAOS,MAEtD0B,EAAMG,QAAUH,EAAMI,UAC5BJ,EAAM1B,KAAO0B,EAAM1B,KAAKA,KAAO4B,EAAgBF,EAAMnC,OAAOS,MAGvDP,EAAAQ,EAAAC,cAAA,uCAaf,SAASY,IACP,MAAM,IAAIiB,MACR,gVATJf,EAAYgB,UAAY,CACtBhC,KAAMiC,IAAUC,OAChB3C,MAAO0C,IAAUE,OAAOC,WACxBP,OAAQI,IAAUI,KAClBP,SAAUG,IAAUI,2BCnCtB,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAA5C,GAAkB,IAAf6C,EAAe7C,EAAf6C,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAOxB,IAAMtB,cAAc+C,IAApBC,OAAAC,OAAA,CACLP,WACAC,iBACGA,EAAcO,QAIrBT,EAAiBX,UAAY,CAC3BY,SAAUX,IAAUoB,MAAM,CACxBL,SAAUf,IAAUE,OAAOC,aAC1BA,YAGUO,6NChBf,SAASW,EAATvD,GAA2D,IAA5CK,EAA4CL,EAA5CK,YAAamD,EAA+BxD,EAA/BwD,KAAMC,EAAyBzD,EAAzByD,KAAMnD,EAAmBN,EAAnBM,SAAUF,EAASJ,EAATI,MAChD,OACEsD,EAAAxD,EAAAC,cAACwD,EAAA,YAAD,CACEnE,MAAOoE,EACP9B,OAAQ,SAAA7B,GACN,IAAM4D,EACJxD,GAAeJ,EAAK6D,KAAKC,aAAa1D,YACxC,OACEqD,EAAAxD,EAAAC,cAAC6D,EAAA9D,EAAD,CACE+D,eAAgB,CACdT,QAEFpD,MAAOA,EACP8D,cAAa,QAAUjE,EAAK6D,KAAKC,aAAa3D,MAC9CqD,KAAM,CACJ,CACEU,KAAM,cACNC,QAASP,GAEX,CACEQ,SAAU,WACVD,QAAShE,GAEX,CACEiE,SAAU,iBACVD,QAASP,GAEX,CACEQ,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASnE,EAAK6D,KAAKC,aAAaO,QAElC,CACEH,KAAM,gBACNC,QAAShE,GAEX,CACE+D,KAAM,sBACNC,QAASP,IAGVU,OACCjE,EAASkE,OAAS,EACd,CACEL,KAAM,WACNC,QAAS9D,EAASmE,KAAK,OAEzB,IAELF,OAAOd,MAtDlBxD,KAAAyE,IA8DJnB,EAAIoB,aAAe,CACjBnB,KAAM,KACNC,KAAM,GACNnD,SAAU,IAGZiD,EAAItB,UAAY,CACd5B,YAAa6B,IAAUE,OACvBoB,KAAMtB,IAAUE,OAChBqB,KAAMvB,IAAU0C,MAChBtE,SAAU4B,IAAU2C,QAAQ3C,IAAUE,QACtChC,MAAO8B,IAAUE,OAAOC,YAGXkB,MAEf,IAAMK,EAAY,8OCjFZkB,EAAS,SAAA9E,GAAA,IAAG+E,EAAH/E,EAAG+E,UAAH,OACbC,EAAA9E,EAAAC,cAAA,OACE8E,MAAO,CACLC,WAAY,OACZC,aAAc,YAGhBH,EAAA9E,EAAAC,cAAA,OACE8E,MAAO,CACLG,OAAQ,SACRC,SAAU,IACVC,QAAS,sBAGXN,EAAA9E,EAAAC,cAAA,MAAI8E,MAAO,CAAEG,OAAQ,IACnBJ,EAAA9E,EAAAC,cAACoF,EAAA,KAAD,CACE3E,GAAG,IACHqE,MAAO,CACLO,MAAO,QACPC,eAAgB,SAGjBV,OAOXD,EAAO7C,UAAY,CACjB8C,UAAW7C,IAAUE,QAGvB0C,EAAOH,aAAe,CACpBI,UAAW,IAGED,QClCTY,UAAS,SAAA1F,GAAA,IAAG+B,EAAH/B,EAAG+B,SAAH,OACbiD,EAAA9E,EAAAC,cAACoF,EAAA,YAAD,CACE/F,MAAK,YASLsC,OAAQ,SAAA7B,GAAI,OACV+E,EAAA9E,EAAAC,cAAA6E,EAAA9E,EAAAyF,SAAA,KACEX,EAAA9E,EAAAC,cAACyF,EAAD,CAAQb,UAAW9E,EAAK6D,KAAKC,aAAa3D,QAC1C4E,EAAA9E,EAAAC,cAAA,OACE8E,MAAO,CACLG,OAAQ,SACRC,SAAU,IACVC,QAAS,wBACTO,WAAY,IAGb9D,KArBT9B,KAAA6F,MA4BFJ,EAAOzD,UAAY,CACjBF,SAAUG,IAAUvB,KAAK0B,YAGZqD","file":"component---src-pages-index-js-fc177cd1b68ba3ba9db5.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\n// import Image from '../components/image'\n// import Img from \"gatsby-image\"\nimport SEO from '../components/seo'\n\nconst IndexPage = ({data}) => (\n  <Layout>\n    <SEO\n      title=\"Trang chủ\"\n      description=\"Đây là những sản phẩm do mình làm trong thời gian rảnh, phần lớn là cho người thân và bạn bè. Mục đích chính là để xả stress và sau đó là để phát triển một số sản phẩm của cá nhân Các bạn có chung sở thích cùng mình đều có thể tham gia!\"\n      keywords={['nghệ thuật chữ viết', 'luật', 'chữ đối xứng', 'chữ tượng hình', 'logo']}\n    />\n    <h1>Sản phẩm</h1>\n    <p>Đây là những sản phẩm do mình làm trong thời gian rảnh, phần lớn là cho người thân và bạn bè. Mục đích chính là\n      để xả stress và sau đó là để phát triển một số sản phẩm của cá nhân Các bạn có chung sở thích cùng mình đều có thể\n      tham gia!</p>\n    <ul>\n      {data.allNodeProductDetail.edges.map(({node}) => (\n        <li>\n          <Link to={node.fields.slug}>{node.title}</Link>\n        </li>\n      ))}\n    </ul>\n  </Layout>\n)\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    allNodeProductDetail(limit: 1000) {\n      edges {\n        node {\n          title\n          fields {\n            slug\n          }\n          relationships {\n            field_image {\n              url\n              localFile {\n                childImageSharp {\n                  fluid {\n                    ...GatsbyImageSharpFluid\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:title',\n                content: title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:type',\n                content: 'website',\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: 'twitter:title',\n                content: title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: 'keywords',\n                      content: keywords.join(', '),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nconst Header = ({ siteTitle }) => (\n  <div\n    style={{\n      background: '#333',\n      marginBottom: '1.45rem',\n    }}\n  >\n    <div\n      style={{\n        margin: '0 auto',\n        maxWidth: 960,\n        padding: '1.45rem 1.0875rem',\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: 'white',\n            textDecoration: 'none',\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </div>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: '',\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\nimport './layout.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: '0 auto',\n            maxWidth: 960,\n            padding: '0px 1.0875rem 1.45rem',\n            paddingTop: 0,\n          }}\n        >\n          {children}\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}